name: CI/CD for AKS Deployment   # Workflow name

on:
  push:
    branches:
      - main   # Runs when code is pushed to main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest   # GitHub runner environment

    steps:
      #  Step 1: Get your code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 3: Log in to ACR (Azure Container Registry)
      - name: Azure Container Registry Login
        run: az acr login --name ${{ secrets.ACR_NAME }}

      # Step 4: Build and Push API image
      - name: Build and Push API Docker Image
        run: |
          IMAGE_API=${{ secrets.ACR_NAME }}.azurecr.io/api:latest
          cd api
          docker build -t $IMAGE_API .    # Build Docker image
          docker push $IMAGE_API          # Push to ACR

      # Step 5: Build and Push Worker image
      - name: Build and Push Worker Docker Image
        run: |
          IMAGE_WORKER=${{ secrets.ACR_NAME }}.azurecr.io/worker:latest
          cd worker
          docker build -t $IMAGE_WORKER .
          docker push $IMAGE_WORKER

      # Step 6: Get AKS credentials (connect kubectl to AKS)
      - name: Get AKS Credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.RESOURCE_GROUP }} \
                                 --name ${{ secrets.AKS_CLUSTER_NAME }} \
                                 --overwrite-existing
      
      #creating secrets for app
      - name: Create Kubernetes Secret for App
        run: |
          kubectl create secret generic app-secrets \
            --from-literal=MONGO_URI="${{ secrets.MONGO_URI }}" \
            --from-literal=AZURE_BLOB_CONN="${{ secrets.AZURE_BLOB_CONN }}" \
            --dry-run=client -o yaml | kubectl apply -f -
      # namespace creation
      - name: Create namespace if not exists
        run: |
          kubectl get namespace my-project || kubectl create namespace my-project
      
      # Step 7: Deploy to AKS (apply Kubernetes YAMLs)
      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s/
